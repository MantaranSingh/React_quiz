{"version":3,"sources":["components/FinalScore.module.css","components/Quiz.js","components/FinalScore.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","paper","width","padding","spacing","textAlign","operators","sign","method","a","b","Quiz","props","classes","title","onEnd","question","started","useState","startQuiz","setStartQuiz","showScore","setShowScore","response","setResponse","score","setScore","count","setCount","inputRef","useRef","operand1","Math","floor","random","operand2","index","length","operator","Grid","container","direction","alignItems","justifyContent","style","height","Paper","className","Typography","align","margin","item","xs","TextField","label","type","InputLabelProps","shrink","Button","color","onClick","answer","enteredValue","parseInt","current","value","toFixed","prevState","variant","FinalScore","result","gutterBottom","map","correct","wrong","App","finalScore","setFinalScore","setQuestion","quesStarted","setQuesStarted","questionRef","responseHandler","prev","helperText","noOfQues","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f8fee71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrong\":\"FinalScore_wrong__P9aR1\",\"correct\":\"FinalScore_correct__2yCOs\"};","import React, { useState, useRef } from 'react';\r\nimport { Paper, Grid, Button, Typography, TextField } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        width: '75%',\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n    },\r\n}));\r\n\r\nlet operators = [\r\n    { sign: \"+\", method: function (a, b) { return a + b; } },\r\n    { sign: \"-\", method: function (a, b) { return a - b; } },\r\n    { sign: \"*\", method: function (a, b) { return a * b; } },\r\n    { sign: \"/\", method: function (a, b) { return a / b; } },\r\n];\r\n\r\nconst Quiz = (props) => {\r\n    const classes = useStyles();\r\n    const { title, onEnd, question, started } = props;\r\n\r\n    const [startQuiz, setStartQuiz] = useState(false);\r\n    const [showScore, setShowScore] = useState(false);\r\n    const [response, setResponse] = useState([]);\r\n    const [score, setScore] = useState(0);\r\n    const [count, setCount] = useState(0);\r\n    const inputRef = useRef();\r\n\r\n    let operand1 = Math.floor(Math.random() * 10 + 1);\r\n    let operand2 = Math.floor(Math.random() * 10 + 1);\r\n    let index = Math.floor(Math.random() * operators.length);\r\n\r\n    let operator = operators[index].sign;\r\n\r\n    const clickHandler = () => {\r\n        let answer = operators[index].method(operand1, operand2);\r\n        let enteredValue = parseInt(inputRef.current.value);\r\n        if (enteredValue === parseInt(answer.toFixed(2))) {\r\n            setScore(score + 1);\r\n        }\r\n\r\n        if (count < question) {\r\n            setResponse(prevState => {\r\n                return [\r\n                    ...prevState,\r\n                    {\r\n                        operand1,\r\n                        operand2,\r\n                        operator,\r\n                        answer: parseInt(answer.toFixed(2)),\r\n                        enteredValue,\r\n                    }\r\n                ];\r\n            });\r\n        } else {\r\n            setShowScore(true);\r\n            onEnd(response);\r\n        }\r\n        setCount(count + 1);\r\n        inputRef.current.value = '';\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' alignItems='center' justifyContent='space-between' style={{ height: '50vh' }}>\r\n            <Paper className={classes.paper}>{title}</Paper>\r\n            {(startQuiz && !showScore) &&\r\n                <Grid>\r\n                    <Paper><Typography align='center'>{operand1} {operator} {operand2}</Typography></Paper>\r\n                    <Grid container style={{ margin: '5px 0' }}>\r\n                        <Grid item xs={9}><TextField label=\"\" type=\"number\" InputLabelProps={{ shrink: true, }} inputRef={inputRef} /></Grid>\r\n                        <Grid item xs={3}><Button color=\"primary\" onClick={clickHandler}>Next</Button></Grid>\r\n                    </Grid>\r\n                </Grid>}\r\n            {!startQuiz && <Button variant=\"contained\" color=\"primary\" onClick={() => { started(); setStartQuiz(true); }}>Start Quiz</Button>}\r\n            {showScore && <Typography>Score {score}</Typography>}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Quiz;","import React, { Fragment } from 'react';\r\nimport { Paper, Grid, Typography } from '@material-ui/core';\r\nimport classes from './FinalScore.module.css';\r\n\r\nconst FinalScore = (props) => {\r\n    const { result } = props;\r\n\r\n    return (\r\n        <Fragment>\r\n            <Typography variant=\"h3\" gutterBottom align='center'>Final Score</Typography>\r\n            <Grid container xs={12} item direction='column'>\r\n                {result.map(({ operand1, operator, operand2, answer, enteredValue }, index) => {\r\n                    return (\r\n                        <Paper className={`${enteredValue === answer ? classes.correct : classes.wrong}`} style={{ margin: '10px 0', padding: '5px', }} key={index}>\r\n                            <Grid container justifyContent='space-between' alignItems='center'>\r\n                                <Typography>{operand1} {operator} {operand2} = {answer}</Typography>\r\n                                <Typography variant=\"caption\">response {(enteredValue || enteredValue === 0) ? enteredValue : 'N/A'}</Typography>\r\n                            </Grid>\r\n                        </Paper>\r\n                    );\r\n                })}\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default FinalScore;\r\n","import React, { useState, useRef } from 'react';\nimport { Grid, TextField, Button } from '@material-ui/core';\nimport Quiz from './components/Quiz';\nimport FinalScore from './components/FinalScore';\n\nfunction App() {\n  const [finalScore, setFinalScore] = useState([]);\n  const [question, setQuestion] = useState(2);\n  const [quesStarted, setQuesStarted] = useState(false);\n  const questionRef = useRef();\n\n  const responseHandler = (response) => {\n\n    setFinalScore(prev => {\n      return [\n        ...prev,\n        ...response,\n      ];\n    });\n\n  };\n  const questionHandler = () => {\n    let noOfQues = questionRef.current.value;\n    if (noOfQues) {\n      setQuestion(noOfQues);\n    }\n    noOfQues = '';\n    setQuesStarted(true);\n  };\n\n  return (\n    <div style={{ padding: 20 }}>\n      {!quesStarted && <Grid container justifyContent='center' style={{ margin: '2rem 0' }}>\n        <TextField label=\"No questions in 1 quiz?\" type=\"number\" inputRef={questionRef} helperText=\"By default 2\" />\n        <Button style={{ margin: '0px 10px' }} variant=\"contained\" color=\"primary\" onClick={questionHandler}> Ok </Button>\n      </Grid>}\n      {finalScore.length < question * 2 ? <Grid container spacing={2}>\n        <Grid item xs={6}>\n          <Quiz title='Quiz 1' onEnd={responseHandler} question={question} started={() => setQuesStarted(true)} />\n        </Grid>\n        <Grid item xs={6}>\n          <Quiz title='Quiz 2' onEnd={responseHandler} question={question} started={() => setQuesStarted(true)} />\n        </Grid>\n      </Grid> : <FinalScore result={finalScore} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}